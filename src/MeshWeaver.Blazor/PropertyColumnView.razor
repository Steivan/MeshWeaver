@using System.Linq.Expressions
@using System.Text.Json
@using System.Text.Json.Nodes
@using MeshWeaver.Layout.DataGrid
@using Microsoft.AspNetCore.Components.Rendering
@inherits BlazorView<PropertyControl, PropertyColumnView>

@((RenderFragment)RenderPropertyColumn)

@code {
    private string Title { get; set; }
    private string Property { get; set; }
    private string Format{ get; set; }
    private bool Sortable { get; set; }
    private bool Tooltip { get; set; }
    private string TooltipText{ get; set; }
    protected override void BindData()
    {
        base.BindData();
        DataBind(ViewModel.Title, x => x.Title);
        DataBind(ViewModel.Property, x => x.Property);
        DataBind(ViewModel.Format, x => x.Format);
        DataBind(ViewModel.Sortable, x => x.Sortable);
        DataBind(ViewModel.Tooltip, x => x.Tooltip);
    }

    private Expression<Func<JsonObject, T>> GetPropertyExpression<T>(PropertyControl<T> control)
    {
        return e => e.ContainsKey(Property) ? e[Property].Deserialize<T>(Stream.Hub.JsonSerializerOptions) : default;
    }

    public void RenderPropertyColumn(RenderTreeBuilder builder)
    {
        var column = ViewModel;

        builder.OpenComponent(0,
            typeof(PropertyColumn<,>).MakeGenericType(typeof(JsonObject), column.GetPropertyType()));
        var index = 0;
        builder.AddComponentParameter(++index, nameof(PropertyColumn<object, object>.Property),
            GetPropertyExpression((dynamic)column));
        builder.AddAttribute(++index, "Title", Title);
        if (!string.IsNullOrEmpty(Format))
            builder.AddAttribute(++index, nameof(PropertyColumn<object, object>.Format), Format);
        if (column.Sortable != null)
            builder.AddAttribute(++index, nameof(PropertyColumn<object, object>.Sortable), Sortable);
        if (column.Tooltip != null)
            builder.AddAttribute(++index, nameof(PropertyColumn<object, object>.Tooltip), Tooltip);
        if (column.TooltipText != null)
            builder.AddAttribute(++index, nameof(PropertyColumn<object, object>.TooltipText),
                (Func<JsonObject, string>)(_ => TooltipText));

        builder.CloseComponent();

    }

}