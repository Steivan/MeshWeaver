@using Markdig
@using Microsoft.JSInterop
@using MeshWeaver.Layout.Markdown
@inherits BlazorView<MarkdownControl>
@inject IJSRuntime JsRuntime;
<div class="markdown">
@if(Html != null)
{
    @((MarkupString)Html) 
}


@foreach (var component in LayoutAreaComponents)
{
    <div id="@(ComponentContainerId(component.DivId))" style="display:none;">
        <LayoutArea Address="@Stream.Owner" Reference="@component.Reference" />
    </div>
}
</div>
@code 
{
    private IReadOnlyList<LayoutAreaComponentInfo> LayoutAreaComponents { get; set; } = [];
    private string Html { get; set; }
    protected override void BindData()
    {
        base.BindData();
        DataBind<string>(ViewModel.Data, RenderMarkdown);
    }

    private void RenderMarkdown(string markdown)
    {
        var layoutAreaExtension = new LayoutAreaMarkdownExtension(Stream.Hub);
        var pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .Use(layoutAreaExtension)
            .Build();
        Html = Markdown.ToHtml(markdown, pipeline);
        LayoutAreaComponents = layoutAreaExtension.MarkdownParser.Areas;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.Import("basicBlazorInterop.js");

            foreach (var component in LayoutAreaComponents)
            {
                await JsRuntime.InvokeVoidAsync("interop.moveComponentToTarget", ComponentContainerId(component.DivId), component.DivId);
            }
        }
    }

    private string ComponentContainerId(string id) => $"component-container-{id}";
}