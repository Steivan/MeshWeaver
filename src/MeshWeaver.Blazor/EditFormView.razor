@using System.Text.Json.Nodes
@using MeshWeaver.Activities
@using Microsoft.AspNetCore.Components.Forms
@using Appearance = Microsoft.FluentUI.AspNetCore.Components.Appearance
@inherits SkinnedView<EditFormControl, EditFormSkin, EditFormView>
@inject IToastService ToastService;

@if (Data == null)
{    
    <FluentProgressRing style="width: 102px; height: 102px;" />
}
else
{
    <EditForm Model="@Data" OnValidSubmit="Submit" >
        <div>
            <dl class="form-group">
                <CascadingValue Name="Model" Value="@Data">
                    <DispatchView ViewModel="@ViewModel" Area="@Area" Stream="@Stream"></DispatchView>
                </CascadingValue>
            </dl>
            @if(Log != null)
            {
                <div class="validation-errors">
                    <h5>Validation failed</h5>
                    <ul>
                        @foreach (var logMessage in Log.Messages)
                        {
                            <li>@logMessage</li>
                    
                        }

                    </ul>
                </div>
            }
            <FluentButton Appearance="Appearance.Accent" type="@ButtonType.Submit" class="btn btn-primary" disabled="@Data.HasChanges">Update</FluentButton>
            <FluentButton Appearance="Appearance.Lightweight" type="@ButtonType.Reset" class="btn btn-secondary" @onclick="Reset" disabled="@Data.HasChanges">Reset</FluentButton>
        </div>
    </EditForm>
}

@code
{
    private ModelParameter Data { get; set; }
    private ActivityLog Log { get; set; }
    protected override void BindData()
    {
        DataBind(new JsonPointerReference(ViewModel.DataContext), x => x.Data, jsonObject => Convert((JsonObject)jsonObject));
    }

    private async void Submit(EditContext context)
    {
        var response = await Stream.Hub.AwaitResponse(new UpdateDataRequest([Data.Submit()]), o => o.WithTarget(Stream.Owner));
        if (response.Message.Status == DataChangeStatus.Committed)
        {
            Data.Confirm();
            ShowSuccess();
            Log = null;
        }
        else
        {
            Log = response.Message.Log;
        }
    }

    private static ModelParameter Convert(JsonObject jsonObject) => jsonObject == null ? null : new(jsonObject);

    private void Reset()
    {
        Data.Reset();
        InvokeAsync(StateHasChanged);
    }

    private void ShowSuccess()
    {
        var message = "Saved successfully";
        ToastService.ShowToast(ToastIntent.Success, message);
    }
    private void ShowError()
    {
        Random rnd = new();

        var message = "Saving failed";
        ToastService.ShowToast(ToastIntent.Error, message);
    }
}
