@using Orientation = Microsoft.FluentUI.AspNetCore.Components.Orientation
@inherits ContainerView<LayoutStackControl>

<FluentStack
    Class="@Class"
    Orientation="@Orientation"
    HorizontalAlignment="@Horizontal"
    VerticalAlignment="@Vertical"
    VerticalGap="@ViewModel.VerticalGap"
    HorizontalGap="@ViewModel.HorizontalGap"
    Style="@Style"
    Wrap="@ViewModel.Wrap"
    >
    @foreach (var (area, viewModel) in Areas)
    {
        <DispatchView ViewModel="@viewModel" Stream="@Stream" Area="@area"/>
    }
</FluentStack>

@code{
    private Microsoft.FluentUI.AspNetCore.Components.VerticalAlignment Vertical => ViewModel.VerticalAlignment 
        switch
    {
        Layout.VerticalAlignment.Center => Microsoft.FluentUI.AspNetCore.Components.VerticalAlignment.Center,
        Layout.VerticalAlignment.Top => Microsoft.FluentUI.AspNetCore.Components.VerticalAlignment.Top,
        Layout.VerticalAlignment.Bottom => Microsoft.FluentUI.AspNetCore.Components.VerticalAlignment.Bottom,
        _ => Microsoft.FluentUI.AspNetCore.Components.VerticalAlignment.Top
    };

    private Microsoft.FluentUI.AspNetCore.Components.HorizontalAlignment Horizontal => ViewModel.HorizontalAlignment
        switch
        {
        Layout.HorizontalAlignment.Center => Microsoft.FluentUI.AspNetCore.Components.HorizontalAlignment.Center,
        Layout.HorizontalAlignment.Left => Microsoft.FluentUI.AspNetCore.Components.HorizontalAlignment.Left,
        Layout.HorizontalAlignment.Right => Microsoft.FluentUI.AspNetCore.Components.HorizontalAlignment.Right,
        Layout.HorizontalAlignment.Start => Microsoft.FluentUI.AspNetCore.Components.HorizontalAlignment.Start,
        Layout.HorizontalAlignment.End => Microsoft.FluentUI.AspNetCore.Components.HorizontalAlignment.End,
            _ => Microsoft.FluentUI.AspNetCore.Components.HorizontalAlignment.Left
        };

    private Orientation Orientation => @ViewModel.Orientation?.ToFluentOrientation() ?? Orientation.Vertical;
}
