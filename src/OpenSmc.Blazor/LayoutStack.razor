@inherits BlazorView<LayoutStackControl>
@{
#pragma warning disable FluentMultiSplitter
}

@if (Skin is ToolbarSkin)
{
    <FluentToolbar 
        Orientation="@Orientation"
        Style="@Style"
    >
        @foreach(var (area,viewModel) in Areas){
            <DispatchView ViewModel="@viewModel" Stream="@Stream" Area="@area"/>
        }
    </FluentToolbar>
}
else if (Skin is GridSkin gridSkin)
{
    <FluentGrid 
        AdaptiveRendering="@gridSkin.AdaptiveRendering"
        Justify="@gridSkin.Justify.ToFluentJustifyContent()"
        Spacing="@gridSkin.Spacing"
        >
        @foreach(var (area,viewModel) in Areas){
            var gridItem = viewModel is LayoutGridItemControl ? viewModel : new LayoutGridItemControl(viewModel);
            <DispatchView ViewModel="@gridItem" Stream="@Stream" Area="@area" />
        }
    </FluentGrid>
}
else if (Skin is SplitterSkin splitterSkin)
{
    <FluentMultiSplitter 
        Orientation="@Orientation"
        BarSize="@splitterSkin.BarSize"
        Width="@splitterSkin.Width"
        Height="@splitterSkin.Height"
        Style="@Style"
        >
        @foreach(var (area,viewModel) in Areas){
            var pane = viewModel is SplitterPaneControl ? viewModel : new SplitterPaneControl(viewModel);
            <DispatchView ViewModel="@pane" Stream="@Stream" Area="@area" />
        }
    </FluentMultiSplitter>
}
else
{
    <FluentStack Orientation="@Orientation"
                 HorizontalAlignment="@Horizontal"
                 VerticalAlignment="@Vertical"
                 VerticalGap="@ViewModel.VerticalGap"
                 HorizontalGap="@ViewModel.HorizontalGap"
                 Style="@Style">
        @foreach (var (area, viewModel) in Areas)
        {
            <DispatchView ViewModel="@viewModel" Stream="@Stream" Area="@area"/>
        }
    </FluentStack>
}

@code{
    private string Style => ViewModel.Style?.ToString();

    private Microsoft.FluentUI.AspNetCore.Components.VerticalAlignment Vertical => ViewModel.VerticalAlignment 
        switch
    {
        Layout.VerticalAlignment.Center => Microsoft.FluentUI.AspNetCore.Components.VerticalAlignment.Center,
        Layout.VerticalAlignment.Top => Microsoft.FluentUI.AspNetCore.Components.VerticalAlignment.Top,
        Layout.VerticalAlignment.Bottom => Microsoft.FluentUI.AspNetCore.Components.VerticalAlignment.Bottom,
        _ => Microsoft.FluentUI.AspNetCore.Components.VerticalAlignment.Top
    };


    private Microsoft.FluentUI.AspNetCore.Components.HorizontalAlignment Horizontal => ViewModel.HorizontalAlignment
        switch
        {
        Layout.HorizontalAlignment.Center => Microsoft.FluentUI.AspNetCore.Components.HorizontalAlignment.Center,
        Layout.HorizontalAlignment.Left => Microsoft.FluentUI.AspNetCore.Components.HorizontalAlignment.Left,
        Layout.HorizontalAlignment.Right => Microsoft.FluentUI.AspNetCore.Components.HorizontalAlignment.Right,
        Layout.HorizontalAlignment.Start => Microsoft.FluentUI.AspNetCore.Components.HorizontalAlignment.Start,
        Layout.HorizontalAlignment.End => Microsoft.FluentUI.AspNetCore.Components.HorizontalAlignment.End,
            _ => Microsoft.FluentUI.AspNetCore.Components.HorizontalAlignment.Left
        };
    private Microsoft.FluentUI.AspNetCore.Components.Orientation Orientation => ViewModel.Orientation
        switch
        {
            OpenSmc.Layout.Orientation.Horizontal => Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal,
            OpenSmc.Layout.Orientation.Vertical => Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical,
            _ => Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical
        };
}
