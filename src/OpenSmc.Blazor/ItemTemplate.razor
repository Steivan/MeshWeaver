@using System.Reactive.Linq
@using Orientation = Microsoft.FluentUI.AspNetCore.Components.Orientation
@inherits BlazorView<ItemTemplateControl>

<FluentStack
    Class="@Class"
    Style="@Style"
    Orientation="@Orientation"
    Wrap="@ViewModel.Wrap"
    >
    @for (int i=0;i<Data.Count;++i)
    {
        <DispatchView ViewModel="@GetViewWithPath(i)" Stream="@Stream" Area="@ViewArea" />
    }
</FluentStack>

@code
{
    private IReadOnlyCollection<object> Data { get; set; } = Array.Empty<object>();

    private UiControl view;

    private string ViewArea => $"{Area}/{ItemTemplateControl.ViewArea}";

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        DataBind<IReadOnlyCollection<object>>(new JsonPointerReference(""), d => Data = d);
        view = GetControl(await Stream.FirstAsync(), ViewArea);
    }

    private UiControl GetViewWithPath(int i) => ViewModel.View with { DataContext = $"{ViewModel.DataContext}/{i}" };

    private Orientation Orientation => @ViewModel.Orientation?.ToFluentOrientation() ?? Orientation.Vertical;
}
