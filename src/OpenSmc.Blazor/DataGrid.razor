@using System.Text.Json.Nodes
@using System.Text.Json
@using System.Linq.Expressions
@using OpenSmc.Layout.DataGrid
@inherits BlazorView<DataGridControl>

<FluentDataGrid Items="@QueryableData" 
                Virtualize="@ViewModel.Virtualize" 
                ItemSize="@ViewModel.ItemSize" 
                GenerateHeader="GenerateHeaderOption.Sticky"
                ResizableColumns="@ViewModel.ResizableColumns"
                Pagination="@Pagination">
    @foreach (DataGridColumn column in ViewModel.Columns)
    {

        @((RenderFragment) (builder =>
        {
            builder.OpenComponent(0, typeof(PropertyColumn<,>).MakeGenericType(typeof(JsonObject), column.GetPropertyType()));
            var index = 0;
            builder.AddComponentParameter(++index, nameof(PropertyColumn<object,object>.Property), GetPropertyExpression((dynamic)column));
            builder.AddAttribute(++index, "Title", column.Title);
            if (!string.IsNullOrEmpty(column.Format))
                builder.AddAttribute(++index, nameof(PropertyColumn<object, object>.Format), column.Format);
            if (column.Sortable)
                builder.AddAttribute(++index, nameof(PropertyColumn<object, object>.Sortable), column.Sortable);
            if(column.Tooltip)
                builder.AddAttribute(++index, nameof(PropertyColumn<object, object>.Tooltip), column.Tooltip);
            if (column.TooltipText != null)
                builder.AddAttribute(++index, nameof(PropertyColumn<object, object>.TooltipText), (Func<JsonObject,string>)(x => column.TooltipText));

            builder.CloseComponent();
        }))

    }
</FluentDataGrid>
<FluentPaginator State="@Pagination" />

@code{
    private PaginationState Pagination = new()
    {
        ItemsPerPage = 10
    };
    private IQueryable<JsonObject> QueryableData {get;set;}

    private Expression<Func<JsonObject, T>> GetPropertyExpression<T>(DataGridColumn<T> column)
    {
        return e => e.ContainsKey(column.Property) ? e[column.Property].Deserialize<T>(Stream.Hub.JsonSerializerOptions) : default;
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        DataBind<object>(ViewModel.Data, x => QueryableData = ((System.Collections.IEnumerable)x)?.Cast<JsonObject>().AsQueryable());
    }
}