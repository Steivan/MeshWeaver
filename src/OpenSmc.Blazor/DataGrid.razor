@using System.Text.Json.Nodes
@using System.Text.Json
@using System.Linq.Expressions
@inherits BlazorView<DataGridControl>

<FluentDataGrid Items="@QueryableData">
    @foreach (DataGridColumn column in ViewModel.Columns)
    {

        @((RenderFragment) (builder =>
        {
            builder.OpenComponent(0, typeof(PropertyColumn<,>).MakeGenericType(typeof(JsonObject), column.GetPropertyType()));
            var index = 0;
            builder.AddComponentParameter(++index, nameof(PropertyColumn<object,object>.Property), GetPropertyExpression((dynamic)column));
            builder.AddAttribute(++index, "Title", column.Title);
            if (!string.IsNullOrEmpty(column.Format))
                builder.AddAttribute(++index, nameof(PropertyColumn<object, object>.Format), column.Format);
            if (column.Sortable)
                builder.AddAttribute(++index, "Sortable", column.Sortable);

            builder.CloseComponent();
        }))

    }
</FluentDataGrid>

@code{
    private object GetValue<T>(JsonObject obj, string propertyName)
        => obj.TryGetPropertyValue(propertyName, out var x) ? x : null;

    private IQueryable<JsonObject> QueryableData => ((System.Collections.IEnumerable)ViewModel.Data)?.Cast<JsonObject>()?.AsQueryable();

    private Expression<Func<JsonObject, T>> GetPropertyExpression<T>(DataGridColumn<T> column)
    {
        return e => e.ContainsKey(column.Property) ? e[column.Property].Deserialize<T>(Stream.Hub.JsonSerializerOptions) : default;
    }
}