@inherits BlazorView<DataGridControl<TGridElement>>
@using OpenSmc.Messaging
@typeparam TGridElement
<div> data grid for @typeof(TGridElement).FullName: @ViewModel</div>
@* <FluentDataGrid Items="@QueryableData">
    @foreach (var column in MappedColumns())
    {
        @((RenderFragment) (builder =>
        {
            builder.OpenComponent(0, column.Type);
            var index = 0;
            foreach (var parameter in column.Parameters)
            {
                builder.AddAttribute(++index, parameter.Key, parameter.Value);
            }
            builder.CloseComponent();
        }))

    }
</FluentDataGrid>

@code{

    [Inject] private IMessageHub Hub { get; set;}

    private IEnumerable<ViewDescriptor> MappedColumns()
    {
        foreach (var column in ViewModel.Columns)
        {
            yield return new ViewDescriptor(
                typeof(Microsoft.FluentUI.AspNetCore.Components.PropertyColumn<,>).MakeGenericType(column.GetType().GetGenericArguments()),
                new Dictionary<string, object>
                {
                    { nameof(DataGridColumn<TGridElement>.Property), column.ColumnExpression },
                    { nameof(DataGridColumn<TGridElement>.Sortable), column.Sortable },
                    { nameof(DataGridColumn<TGridElement>.Format), column.Format }
                });
        }
    }


    private IQueryable<TGridElement> QueryableData => ((System.Collections.IEnumerable)DataContext)?.Cast<TGridElement>()?.AsQueryable();
} *@